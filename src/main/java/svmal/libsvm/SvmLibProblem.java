package svmal.libsvm;import svmal.weka.core.DataContainer;import weka.core.FastVector;import svmal.weka.core.InstanceContainer;public class SvmLibProblem implements DataContainer, java.io.Serializable {    public double[] maxValue = null;    public double[] minValue = null;    public int classIndex = -1;    public svm_problem prob = null;    public FastVector indexes = null;    public InstanceContainer getInstance(int indx) {        return new SvmLibPair(this.prob.x[indx],                this.prob.y[indx],                (IntegerContainer) indexes.elementAt(indx));    }    public int size() {        return this.prob.l;    }    public DataContainer makeEmptyCopy() {        SvmLibProblem svmProbCopy = new SvmLibProblem();        svmProbCopy.classIndex = this.classIndex;        svmProbCopy.minValue = this.minValue;        svmProbCopy.maxValue = this.maxValue;        svmProbCopy.prob = new svm_problem();        svmProbCopy.prob.l = 0;        svmProbCopy.indexes = new FastVector();        svmProbCopy.prob.x = null;        svmProbCopy.prob.y = null;        return svmProbCopy;    }    public void addInstance(InstanceContainer o) {        this.prob.l++;        svm_node[][] newNodes = new svm_node[this.prob.l][];        double[] newClasses = new double[this.prob.l];        if (this.prob.l - 1 > 0) {            System.arraycopy(this.prob.x, 0, newNodes, 0, this.prob.l - 1);            System.arraycopy(this.prob.y, 0, newClasses, 0, this.prob.l - 1);        }        this.prob.x = newNodes;        this.prob.y = newClasses;        this.prob.x[this.prob.l - 1] = ((SvmLibPair) o).getNodes();        this.prob.y[this.prob.l - 1] = ((SvmLibPair) o).classValue();        try {            this.indexes.addElement(new IntegerContainer(((SvmLibPair) o).getIndex()));        } catch (Exception e) {            System.out.println("SvmLibProblem.addInstance(): failed to get index");            this.indexes.addElement(new IntegerContainer(-1));        }    }    public void deleteInstance(int indx) {        this.prob.l--;        svm_node[][] newNodes = new svm_node[this.prob.l][];        double[] newClasses = new double[this.prob.l];        System.arraycopy(this.prob.x, 0, newNodes, 0, indx);        System.arraycopy(this.prob.y, 0, newClasses, 0, indx);        System.arraycopy(this.prob.x, indx + 1, newNodes, indx, this.prob.l - indx);        System.arraycopy(this.prob.y, indx + 1, newClasses, indx, this.prob.l - indx);        this.prob.x = newNodes;        this.prob.y = newClasses;        this.indexes.removeElementAt(indx);    }    public String toString() {        StringBuffer res = new StringBuffer("SVM Lib Data");        /*        try {            int posCount=0, negCount=0;            int i, size = size();            InstanceContainer ins;            for (i=0; i<size; i++) {                ins = getInstance(i);                if ((int)(ins.classValue()) == 0) {                    negCount++;                } else {                    posCount++;                }            }            res.append("Total number of instances: " + (posCount+negCount) + "\n");            res.append("Positive instances: " + posCount + "\n");            res.append("Negative instances: " + negCount + "\n");        } catch (Exception e) {            System.out.println(e.getMessage());            e.printStackTrace();        }*/        return res.toString();    }}