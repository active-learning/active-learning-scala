list.files
install
package.install
install.packages("validator")
install.packages("clvalid")
install.packages("clValid")
?clVa'
library(clValid)
?clValid
library(clValid)
r
?dist
?SCOREZ
?score
?scale
scale(iris[,1:4])
summary(scale(iris[,1:4]))
tmp = scale(iris[,1:4])
tmp$
tmṕ
tmp
attr
attr(tmp)
class(tmp)
data = irs[,1:4]
data = iris[,1:4]
data
data = scale(data)
data
data[,1]
mat = dist(data)
mat
class(mat)
as.matrix(mat)
head(as.matrix(mat))
mat[,1]
mat[1,]
mat = as.matrix(mat)
mat[1,]
mat[2,]
mat[1:2,]
iris
data = iris[,1:4]
library(clValid)
clValid(data, 3)
head(data)
aux = clValid(data, 3)
summary(aux)
?clValid
source("/home/davi/caracteriz/unsupcharac.r")
measures
main
main()
mcapply
main()
require("mcapply")
require("mc2d")
require("mcapply")
library(mc2d)
install.packages("mc2d", repos="http://R-Forge.R-project.org")
install.packages("mc2d", repos="http://R-Forge.R-project.org")
install.packages("mc2d", repos="http://R-Forge.R-project.org")
library(mc2d)
install.packages('/home/davi/Downloads/mc2d_0.1-15.tar.gz', repos = NULL, type="source")
install.packages("mc2d", repos="http://R-Forge.R-project.org")
install.packages("mc2d", repos="http://R-Forge.R-project.org")
package.install
list.files
install.packages("/home/davi/Downloads/mc2d_0.1-15.tar.gz", repos = NULL, type="source")
install.packages("/home/davi/Downloads/mc2d_0.1-15.tar.gz", repos = NULL, type="source")
install.packages("mc2d", repos="http://R-Forge.R-project.org", type="source")
mx <- matrix(0,4,2)
mx
mx <- matrix(0,4,2)
mx
mx[2,1] = mx[3,2] = mx[4,1] = mx[4,2] = 1
mx
clust = as.integer(c(1,1,2,2))
clust
cls.attrib(mx,clust)
library(clv)
cls.attrib(mx,clust)
data(iris)
iris.data <- iris[,1:4]
pam.mod <- pam(iris.data,5) # create five clusters
v.pred <- as.integer(pam.mod$clustering) # get cluster ids associated to given data objects
v
cls.scatt1 <- cls.scatt.data(iris.data, v.pred)
cls.scatt2 <- cls.scatt.data(iris.data, v.pred, dist="manhattan")
cls.scatt3 <- cls.scatt.data(iris.data, v.pred, dist="correlation")
cls
cls.scatt1
intraclust = c("complete","average","centroid")
interclust = c("single", "complete", "average","centroid", "aveToCent", "hausdorff")
cls.scatt <- cls.scatt.data(iris.data, v.pred, dist="manhattan")
 clv.Dunn(cls.scatt, intraclust, interclust)
clv.Dunn(cls.scatt, intraclust, interclust)
clv.Davies.Bouldin(cls.scatt, intraclust, interclust)
Dunn <- function(data,clust)
clv.Dunn( cls.scatt.data(data,clust),
intracls = c("complete","average","centroid"),
intercls = c("single", "complete", "average","centroid", "aveToCent", "hausdorff")
)
Dunn <- function(data,clust)
clv.Dunn( cls.scatt.data(data,clust),
intracls = c("complete","average","centroid"),
intercls = c("single", "complete", "average","centroid", "aveToCent", "hausdorff")
)
Dunn(iris.data, v.pred)
clv.Dunn(iris.data, v.pred)
clv.Dunn(cls.scatt, intraclust, interclust)
library(mc2d)
Mean, cluster size and center
6 Intercluster distances and 3 intracluster diameters
Davies-Bouldin Index
Inter-cluster density
separation between clusters
Dunn index 
Average scattering for clusters
SD and S_Dbw validity indices
Connectivity Index
data()
data(cars)
cars
iris
ls()
v <- 1:5
v
v <- c(1,2)
v
v <- seq(0,0,6)
v
v <- seq(0,0,length=6)
v
v <- seq(0,0,length.out=6)
v
a<-(1,2,3)
a<-c(1,2,3)
b<-c(5,6,7)
cbind(a,b)
rbind(a,b)
install.packages("multicore") 
install.packages("parallel")
install.packages("multicore")
install.packages("multicore")
source "unsupcharac.r"
source ("unsupcharac.r")
measures
measures(iris)
main
main()
main()
main()
source ("unsupcharac.r")
source ("unsupcharac.r")
source ("unsupcharac.r")
main()
source ("unsupcharac.r")
main()
source ("unsupcharac.r")
main()
nClust
source ("unsupcharac.r")
main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
1:nrow(data)
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
list.files(path,full.names=TRUE)
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
max(1,2)
max(1,2,4)
max(1,2,4,-1)
source ("unsupcharac.r"); main()
source ("unsupcharac.r"); main()
source ("test.r"); main()
source ("test.r"); main()
source ("test.r"); main()
